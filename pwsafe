#!/usr/bin/env bash

set -o errtrace
set -o nounset
set -o pipefail

umask 077

filter="$(command -v grep) -v -E"
gpg="$(command -v gpg || command -v gpg2)"
#gpgexists="$(command -v gpg || command -v gpg2)"
safefile=${PWSAFE:=pw.safe}

fail () {
	# print an error message on fail and exit the program.
	printf "\n\n"
	tput setaf 1 1 1 ; echo "Error: ${1}" ; tput sgr0
	exit 1  
}

get_pass() {
	# prompt for password
	password=""
	prompt="${1}"

	while IFS= read -p "${prompt}" -r -s -n 1 char ; do
		if [[ ${char} == $'\0' ]] ; then
			break
		elif [[ ${char} == $'\177' ]] ; then
			if [[ -z "${password}" ]] ; then
				prompt=""
			else
				prompt=$'\b \b'
				password="${password%?}"
			fi
		else
			prompt="*"
			password+="${char}"
		fi
	done  
}

decrypt() {
	# decrypt with a known password
	echo "${1}" | ${gpg} --armor --batch --decrypt --passphrase-fd 0 "${2}" 2>/dev/null
  
}

encrypt() {
	# encrypt with a password
	${gpg} --armor --batch --symmetric --yes --passphrase-fd 3 --output "${2}" "${3}" 3< <(echo "${1}")
  
}

read_pass() {
	# read a password from the safe file
	if [[ ! -s ${safefile} ]] ; then fail "${safefile} not found" ; fi

	if [[ -z "${2+x}" ]] ; then read -r -p "
	Username / Service (leave blank to list all): " username
	else
		username="${2}"
	fi

	if [[ -z "${username}" || "${username}" == "all" ]] ; then username="" ; fi

	while [[ -z "${password}" ]] ; do get_pass "
	Password to unlock ${safefile}: " ; done
	printf "\n\n"

	decrypt "${password}" ${safefile} | grep -F " ${username}" || fail "Decryption failed"
}

gen_pass() {
	# generate a password
	len=16
	max=50

	if [[ -z "${3+x}" ]] ; then read -p "
	Password length (default: ${len}, max: ${max}): " length
	else
		length="${3}"
	fi

	if [[ ${length} =~ ^[0-9]+$ ]] ; then len=${length} ; fi

	# base64: 4 characters for every 3 bytes
	${gpg} --armor --gen-random 0 "$((${max} * 3/4))" | cut -c -"${len}"
}

write_pass() {
	# write a password to the safe file
	# if no password (when deleting), clear entry and replace with an empty line
	if [[ -z "${userpass+x}" ]] ; then
		entry=" "
	else
		entry="${username} ${userpass}"
	fi

	get_pass "
	Password to unlock ${safefile} file: " ; echo

	# if safe file exists, decrypt it and filter out username/pass, or bail with error
	# if successful, append entry or blank line.
	# filter blank lines and previous timestamp, append fresh timestamp
	# finally, encrypt it all to a new safe file, or fail (oops)
	# if successful, update to new safe file.
	( if [[ -f "${safefile}" ]] ; then
		decrypt "${password}" ${safefile} | \
		${filter} " ${username}$" || return
	fi ; \
	echo "${entry}") | \
	(${filter} "^[[:space:]]*$|^mtime:[[:digit:]]+$";echo mtime:$(date +%s)) | \
	encrypt "${password}" ${safefile}.new - || fail "Write to safe failed"
	mv ${safefile}{.new,}
  
}

new_entry() {
	# prompt for new username and/or password
	if [[ -z "${2+x}" ]] ; then read -r -p "
		Username: " username
		else
			username="${2}"
		fi

  if [[ -z "${3+x}" ]] ; then get_pass "
  Password for \"${username}\" (Enter to generate): "
    userpass="${password}"
  fi

  if [[ -z "${password}" ]] ; then userpass=$(gen_pass "$@")
    if [[ -z "${4+x}" || ! "${4}" =~ ^([qQ])$ ]] ; then
      echo "
  Password: ${userpass}"
    fi
  fi
}

print_help() {
	# print help text with example options and uses
	echo "
		pwsafe is a shell script to manage password with GnuPG symmetric encryption.
		
		**still need to update this**
	"
  
}

if [[ -z ${gpg} && ! -x ${gpg} ]] ; then fail "GnuPG is not installed, or is not configured properly." ; fi

password=""

action=""
if [[ -n "${1+x}" ]] ; then
	action="${1}"
fi

while [[ -z "${action}" ]] ;
	do read -n 1 -p "
	Read, Write or Delete password (or Help): " action
	printf "\n"
done

if [[ "${action}" =~ ^([hH])$ ]] ; then
  print_help
elif [[ "${action}" =~ ^([wW])$ ]] ; then
  new_entry "$@"
  write_pass
elif [[ "${action}" =~ ^([dD])$ ]] ; then
  if [[ -z "${2+x}" ]] ; then read -p "
  Username: " username
  else
    username="${2}"
  fi
  write_pass
else
  read_pass "$@"
fi

printf "\n" ; tput setaf 2 2 2 ; echo "Done" ; tput sgr0
